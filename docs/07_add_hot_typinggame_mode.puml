@startuml 07_add_hot_typinggame_mode

note as note_main
  背景がピンク：新規に作成したクラス
  背景がオレンジ：修正したクラス
end note

class Main {
  + {static} main()
}

package business {
  class TypingGame {
    - TypingGameDifficulty difficulty
    - List<Question> questions
    - TypingGameListener listener
    - List<QuestionResult> results
    - ZonedDateTime startTime
    - ZonedDateTime endTime
    - Question prevQuestion
    + TypingGame(TypingGameDifficulty difficulty, List<Question> questions, TypingGameListener listener)
    + void execute()
    + List<QuestionResult> getResults()
    + long getTimeToCalculate()
    + boolean isSameDifficulty(TypingGameDifficulty difficulty)
    + int getNumberOfQuestions()
    - Question getNextQuestion()
    - String toString()
  }

  interface TypingGameListener {
    void onGameStart(TypingGame typingGame)
    void onGameEnd(TypingGame typingGame)
    String receiveAnswer(Question question)
    void onJudgeOK(TypingGame typingGame)
    void onJudgeNG(TypingGame typingGame)
  }

  enum TypingGameMode #Pink {
    + NORMAL
    + HOT
    ..
    - String name
    - int mode
    - boolean defaultMode
    __
    + TypingGameMode(String name, int mode, boolean defaultMode)
    + {static} TypingGameMode of(int mode)
    + {static} TypingGameMode getDefault()
    + String getName()
    + int getMode()
  }

  enum TypingGameDifficulty {
    + EASY
    + NORMAL
    + HARD
    ..
    - String name
    - int level
    - boolean defaultLevel
    __
    + TypingGameDifficulty(String name, int level, boolean defaultLevel)
    + {static} TypingGameDifficulty of(int level)
    + {static} TypingGameDifficulty getDefault()
    + String getName()
    + int getLevel()
    + boolean lessThan(TypingGameDifficulty difficulty)
  }

  class TypingGameHistory {
    - List<TypingGame> typingGames
    + void add(TypingGame typingGame)
    + List<TypingGame> sortedTypingGames(TypingGameDifficulty difficulty)
    - List<TypingGame> getTypingGames(TypingGameDifficulty difficulty)
  }

  class TypingGameFactory #Orange {
    + {static} TypingGame generate(TypingGameDifficulty difficulty, TypingGameMode typingGameMode)
  }
  note top
    TypingGameFactoryでTypingGameListenerの
    実装クラスを切り替えられるように修正。
  end note

  class Question {
    - String word
    - TypingGameDifficulty difficulty
    + Question(String word, TypingGameDifficulty difficulty)
    + String getWord()
  }

  class QuestionResult {
    - Question question
    - String answer
    - boolean judge
    + QuestionResult(Question question, String answer, boolean judge)
    + Question getQuestion()
    + String getAnswer()
    + boolean isJudge()
  }

  class QuestionFactory {
    + static List<Question> generate(TypingGameDifficulty difficulty)
    - static List<Question> generate()
  }
}

package ui {
  class ConsoleConductor #Orange {
    + execute()
    - TypingGameDifficulty displayInputDifficulty()
    - TypingGameMode displayInputMode()
    - void displayCountDown()
    - void displayResult(TypingGame typingGame)
    - void displayRanking(TypingGameHistory typingGameHistory, TypingGameDifficulty difficulty)
    - boolean displayInputRetry()
    - static int getInputInt(int defaultValue)
  }
  note bottom of ConsoleConductor
    ゲームモードを標準入出力から受け取るために、
    displayInputModeを追加した。
  end note

  class NormalTypingGameListener implements TypingGameListener

  class HotTypingGameListener #Pink implements TypingGameListener
  note bottom of HotTypingGameListener
    TypingGameListenerの新しい実装クラスを追加した。
  end note

  class StandardInputReader {}
}

Main -l- ConsoleConductor : use >

ConsoleConductor -- TypingGameFactory : use >
ConsoleConductor -- StandardInputReader : use >

TypingGameFactory -- QuestionFactory : use >
TypingGameFactory -- TypingGameMode : use >

TypingGameFactory -- TypingGame : generate >

QuestionFactory -- Question : generate >

TypingGameHistory --> TypingGame
TypingGame --> TypingGameDifficulty
TypingGame --> Question
TypingGame --> QuestionResult
TypingGame --> TypingGameListener

NormalTypingGameListener -- StandardInputReader : use >
HotTypingGameListener -- StandardInputReader : use >

@enduml
